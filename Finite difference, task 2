import numpy as np
import matplotlib.pyplot as plt
import re


def get_A_b(n, start, end, equation):  # function to count coefficient and matrices A and b
    match = re.search(r"([+-]?\d*)\s*y", equation)
    coef = int(match.group(1))  # coefficient in front of y in linear problem
    h = (end - start) / n
    x = np.linspace(start, end, n + 1)
    # Get A
    A = np.zeros((n + 1, n + 1))
    A[0, 0] = 1
    A[n, n] = -2 - coef * h ** 2
    A[n, n - 1] = 2
    for i in range(1, n):
        A[i, i - 1] = 1
        A[i, i] = -2 - coef * h ** 2  # 2yn−1−2yn−h^2(equation)=0 - main diagonal
        A[i, i + 1] = 1

    b = np.zeros(n + 1)
    for i in range(1, n + 1):
        b[i] = -coef * h ** 2 * x[i]  # right-hand side values

    return x, A, b


# Input values: equation, start and end of the interval, exact solution, grid conditions
print("Input right-hand side in terms of x and y: ")
equation = input()
print("Input start of the interval: ")
start = eval(input())
print("Input end of the interval: ")
end = eval(input())
print("Input exact solution in terms of x: ")
exact_solution = eval(input().replace('x', str(end)))
print("Input grid boundaries")
n_start = int(input())
n_end = int(input())
print("Input step size: ")
n_step = int(input())

# Initialize lists for errors
grid_number = []
errors = []

# Loop over range of n values, using our get_a_b function
for n in range(n_start, n_end + 1, n_step):
    x, A, b = get_A_b(n, start, end, equation)
    y = np.linalg.solve(A, b)
    grid_number.append(n)
    e = exact_solution - y[-1]
    errors.append(e)

# Plotting
plt.figure(figsize=(10, 10))
plt.plot(grid_number, errors)
plt.yscale('log')
plt.xlabel('n grid points')
plt.ylabel('errors at x = ' + str(end))
plt.show()
